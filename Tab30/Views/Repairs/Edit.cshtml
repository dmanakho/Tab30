@model Tab30.ViewModels.TabletRepairViewModel

@{
    ViewBag.Title = "Start Repair";
}

<h4 class="my-5"><span class="text-primary">Repair for @Model.TabletName </span><span class="text-muted">started on: @Model.RepairCreated</span></h4>
<h6 class="text-primary">Technician: @Model.TechName</h6>
<hr />
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "repairForm" }))
{
    <div class="row">
        <div class="col-5">


            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(m => m.TechID)
            @Html.HiddenFor(m => m.TechName)
            @Html.HiddenFor(m => m.TabletID)
            @Html.HiddenFor(m => m.TabletName)
            @Html.HiddenFor(m => m.RepairCreated)


            <div class="form-row">
                <div class="col-6">
                    <div class="form-row">
                        <div class="form-group col-12">
                            @Html.LabelFor(model => model.VendorCaseNo, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.VendorCaseNo, new { htmlAttributes = new { @class = "form-control d-inline-block col-9" } })
                            @Html.ValidationMessageFor(model => model.VendorCaseNo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-12">
                            @Html.LabelFor(model => model.RepairTypes, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.RepairTypeID, Model.RepairTypes, "---select--", new { @class = "form-control select2-multiple col-12" })
                            @Html.ValidationMessageFor(model => model.RepairTypeID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.DisplayNameFor(m => m.Problems)
                    </div>
                    <div>

                        @Html.ListBoxFor(m => m.AssignedProblems, Model.Problems, new { @class = "select2-multiple form-control col-12", multiple = "multiple" })
                        @Html.ValidationMessageFor(m => m.AssignedProblems, "", new { @class = "text-danger" })

                    </div>


                    <div class="form-group">
                        @Html.LabelFor(model => model.RepairDescription, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.RepairDescription, new { htmlAttributes = new { @class = "form-control col-12" } })
                        @Html.ValidationMessageFor(model => model.RepairDescription, "", new { @class = "text-danger" })

                    </div>

                </div>
                <div class="col-6">
                    <div class="form-row">
                        <div class="form-group col-6">
                            <div class="checkbox d-inline-block">
                                @Html.EditorFor(model => model.IsBoxRequested)
                                @Html.ValidationMessageFor(model => model.IsBoxRequested, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.IsBoxRequested, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="form-group col-6">
                            @Html.LabelFor(model => model.BoxRequestedOn, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.BoxRequestedOn, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.BoxRequestedOn, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-6">
                            <div class="checkbox d-inline-block text-right">
                                @Html.EditorFor(model => model.IsShipped)
                                @Html.ValidationMessageFor(model => model.IsShipped, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.IsShipped, htmlAttributes: new { @class = "control-label" })
                        </div>

                        <div class="form-group col-6">
                            @Html.LabelFor(model => model.ShippedOn, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.ShippedOn, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ShippedOn, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-6">
                            <div class="checkbox d-inline-block">
                                @Html.EditorFor(model => model.IsUnitReturned)
                                @Html.ValidationMessageFor(model => model.IsUnitReturned, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.IsUnitReturned, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="form-group col-6">
                            @Html.LabelFor(model => model.ReturnedOn, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.ReturnedOn, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ReturnedOn, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-6">
                            <div class="checkbox d-inline-block text-right">
                                @Html.EditorFor(model => model.IsComplete)
                                @Html.ValidationMessageFor(model => model.IsComplete, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.IsComplete, htmlAttributes: new { @class = "control-label text-success" })
                        </div>
                        <div class="form-group col-6">
                            @Html.LabelFor(model => model.RepairClosed, htmlAttributes: new { @class = "control-label text-success" })
                            @Html.EditorFor(model => model.RepairClosed, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.RepairClosed, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-7">
            @{
                //Need to find a better solution that this.
                var partOrders = new Tab30.Models.PartOrder();
            }

            @* This was helpful: https://stackoverflow.com/questions/30094047/post-an-html-table-to-ado-net-datatable/30094943#30094943
                this is my question: https://stackoverflow.com/questions/49121276/how-to-bind-javascript-to-checkboxes-and-datetimepicker-inside-table-created-in?noredirect=1#comment85248442_49121276
            *@
            <h5 class="text-primary">Parts Ordered:</h5>
            @*<div class="form-row">
                <div class="form-group col-12">
                    @Html.ListBoxFor(m => m.OrderedPartIDs, Model.OrderedPartsSelectList, new { @class = "select2-multiple form-control col-12", multiple = "multiple" })
                    @Html.ValidationMessageFor(m => m.OrderedPartIDs, "", new { @class = "text-danger" })
                </div>
            </div>*@
            <table id="partsOrders" class="table table-bordered">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(r => partOrders.Part.Description)

                        </th>
                        <th>
                            @Html.DisplayNameFor(r => partOrders.IsPartReceived)
                        </th>
                        <th>
                            @Html.DisplayNameFor(r => partOrders.OrderedOn)
                        </th>
                        <th>
                            @Html.DisplayNameFor(r => partOrders.ReceivedOn)
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.PartOrders.Count(); i++)
                    {
                        @Html.HiddenFor(m=>m.OrderedPartIDs[i])
                        <tr>
                            <td>@Html.DisplayFor(m => m.PartOrders[i].Part.Description, new { htmlAttributes = new { @class = "form-control" } })</td>
                            <td class="text-center"><label style="display:block;overflow: hidden; background:rgb(252, 239, 173)">@Html.EditorFor(m => m.PartOrders[i].IsPartReceived, new { htmlAttributes = new { @class = "checkbox isPartReceived" } })</label></td>
                            <td class="text-center">@Html.DisplayFor(m => m.PartOrders[i].OrderedOn, new { htmlAttributes = new { @class = "form-control" } })</td>
                            <td>@Html.EditorFor(m => m.PartOrders[i].ReceivedOn, new { htmlAttributes = new { @class = "form-control partReceivedOn" } })</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="form-group">
            <div class="">
                <input type="submit" value="Save&Exit" class="btn btn-primary" />
            </div>
        </div>

    </div>
}
<div class="col-6">
    @Html.ActionLink("Back to Repair List", "Index", "Repairs", null, new { @class = "btn btn-sm btn-outline-primary" })
    @Html.ActionLink("Back to Tablet", "Details", "Tablets", new { id = Model.TabletID }, new { @class = "btn btn-sm btn-outline-primary" }) |
    @Html.ActionLink("Back to Tablet List", "Index", "Tablets", null, new { @class = "btn btn-sm btn-outline-primary" })
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(
            function () {
                $("#IsBoxRequested").click(function () {
                    var checkBox = $("#IsBoxRequested");
                    var timeBox = $("#BoxRequestedOn");
                    setTime(checkBox, timeBox);
                });
                $("#IsShipped").click(function () {
                    var checkBox = $("#IsShipped");
                    var timeBox = $("#ShippedOn");
                    setTime(checkBox, timeBox);
                });
                $("#IsUnitReturned").click(function () {
                    var checkBox = $("#IsUnitReturned");
                    var timeBox = $("#ReturnedOn");
                    setTime(checkBox, timeBox);
                });
                $("#IsComplete").click(function () {
                    var checkBox = $("#IsComplete");
                    var timeBox = $("#RepairClosed");
                    setTime(checkBox, timeBox);
                });
                $(".isPartReceived").click(function () {
                    var checkBox = $(".isPartReceived");
                    var timeBox = $("#partReceivedOn");
                    setTime(checkBox, timeBox);
                });
                $(".select2-multiple").select2();
                $(".isPartReceived").click(function () {
                    var timeBox = $(this).closest('tr').find('.partReceivedOn');
                    setTime($(this), timeBox);

                });
            }
        );

        function setTime(checkbox, timebox) {
            if (checkbox.prop('checked') == true) {
                timebox.val(getToday());
            }
            else {
                timebox.val(null);
            }
        }
        function getToday() {
            var now = new Date();
            var day = ("0" + now.getDate()).slice(-2);
            var month = ("0" + (now.getMonth() + 1)).slice(-2);
            return today = now.getFullYear() + "-" + (month) + "-" + (day);
        }
    </script>
}
