@model Tab30.ViewModels.TabletViewModel

@{
    ViewBag.Title = $"Edit {Model.TabletName}";
}

<div class="container">
    <div class="row my-5">
        <div class="col-3">
            <h4 class="text-primary">@Html.DisplayFor(model => model.TabletName)</h4>
        </div>
        <div class="col-9">
            <p class="text-muted text-lowercase">
                @Html.DisplayNameFor(model => model.CreatedOn)  @Html.DisplayFor(model => model.CreatedOn)
                @Html.DisplayNameFor(model => model.CreatedBy)  @Html.DisplayFor(model => model.CreatedBy);<br />
                @Html.DisplayNameFor(model => model.UpdatedOn) @Html.DisplayFor(model => model.UpdatedOn)
                @Html.DisplayNameFor(model => model.UpdatedBy) @Html.DisplayFor(model => model.UpdatedBy)
            </p>

        </div>
    </div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <div>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(m => m.ID)
                @Html.HiddenFor(m => m.RowVersion)
                @Html.HiddenFor(m => m.CreatedBy)
                @Html.HiddenFor(m => m.CreatedOn)
                @Html.HiddenFor(m => m.UpdatedBy)
                @Html.HiddenFor(m => m.UpdatedOn)
                <div class="row">
                    <div class="col-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.TabletName, htmlAttributes: new { @class = "control-label " })
                            <div class="">
                                @Html.EditorFor(model => model.TabletName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.TabletName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Make, htmlAttributes: new { @class = "control-label " })
                            <div class="">
                                @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label " })
                            <div class="">
                                @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.SerialNo, htmlAttributes: new { @class = "control-label " })
                            <div class="">
                                @Html.EditorFor(model => model.SerialNo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.SerialNo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AssetTag, htmlAttributes: new { @class = "control-label " })
                            <div class="">
                                @Html.EditorFor(model => model.AssetTag, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AssetTag, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.WarrantyExpiresOn, htmlAttributes: new { @class = "control-label " })
                            <div class="">
                                @Html.EditorFor(model => model.WarrantyExpiresOn, new { htmlAttributes = new { @class = "form-control" } })

                                @Html.ValidationMessageFor(model => model.WarrantyExpiresOn, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div>
                                @Html.EditorFor(model => model.ADPEnabled)
                                @Html.LabelFor(model => model.ADPEnabled, htmlAttributes: new { @class = "control-label col-2" })
                                @Html.ValidationMessageFor(model => model.ADPEnabled, "", new { @class = "text-danger" })

                                @Html.EditorFor(model => model.IsOutOfCirculation)
                                @Html.LabelFor(model => model.IsOutOfCirculation, htmlAttributes: new { @class = "control-label col-4" })
                                @Html.ValidationMessageFor(model => model.IsOutOfCirculation, "", new { @class = "text-danger" })

                                @Html.EnumDropDownListFor(m => m.OutOfCirculationReason, "--select--", new { id = "OutOfCirculation", @class = "col-4 form-control flow-right", disabled = "disabled" })
                                @Html.ValidationMessageFor(model => model.OutOfCirculationReason, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LocationID, "Location:", htmlAttributes: new { @class = "control-label" })
                            <div class="">
                                @Html.DropDownListFor(m => m.LocationID, Model.Locations, "--select--", new { @class = "form-control select2-multiple  col-md-12" })
                                @Html.ValidationMessageFor(model => model.LocationID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.UserID, "Assigned User:", htmlAttributes: new { @class = "control-label" })
                            <div class="">
                                @Html.DropDownListFor(m => m.UserID, Model.Users, "--select--", new { @class = "form-control select2-multiple  col-md-12" })
                                @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div>
                        <input type="submit" value="Save" class="btn btn-primary" /> |
                        @Html.ActionLink("Back to Tablet", "Details", new { id = Model.ID }, new { @class = "btn btn-outline-primary" }) |
                        @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-outline-primary" })
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>

        $(document).ready(function () {
            $(".select2-multiple").select2();

            $("#IsOutOfCirculation").click(function () {
                var checkBox = $("#IsOutOfCirculation");
                var dropDownBox = $("#OutOfCirculation");
                if (checkBox.prop('checked') == true) {
                    console.log("checked")
                    dropDownBox.prop('disabled', false);
                }
                else {
                    dropDownBox.prop('disabled', true);
                }

            });
        });
    </script>
}
